<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Selenium on Tech Adventures by Tarun Lalwani</title>
    <link>https://tarunlalwani.in/tags/selenium/</link>
    <description>Recent content in Selenium on Tech Adventures by Tarun Lalwani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tarunlalwani.in/tags/selenium/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Change firefox profile settings at runtime using selenium</title>
      <link>https://tarunlalwani.in/post/change-profile-settings-at-runtime-firefox-selenium/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/change-profile-settings-at-runtime-firefox-selenium/</guid>
      <description>Selenium allows creating a custom profile for firefox and launching the browser with the same. Below is a sample code on how to change the download folder of the browser launched
from selenium import webdriver profile = webdriver.FirefoxProfile() profile.set_preference(&amp;quot;browser.download.folderList&amp;quot;, 2) profile.set_preference(&amp;quot;browser.download.manager.showWhenStarting&amp;quot;, False) profile.set_preference(&amp;quot;browser.download.dir&amp;quot;, &#39;/Users/tarunlalwani/Downloads/&#39;) profile.set_preference(&amp;quot;browser.helperApps.neverAsk.saveToDisk&amp;quot;, &amp;quot;application/x-gzip&amp;quot;) driver = webdriver.Firefox(firefox_profile=profile)  This is good when you know the download folder while starting the browser or you are NOT interested in changing the download folder after the browser has starting.</description>
    </item>
    
    <item>
      <title>AWS Docker Swarm - Deploying a Selenium grid</title>
      <link>https://tarunlalwani.in/post/deploy-selenium-grid-using-docker-swarm-aws/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/deploy-selenium-grid-using-docker-swarm-aws/</guid>
      <description>Selenium Grid helps us to group multiple machines as worker nodes to provide browsers for our tests. To run multiple tests in parallel grid is a must.
With Docker Swarm it becomes easy to create dynamic grid, which can be scaled on need. This article will walk you through setting up a Grid on AWS using 3 machines (1 manager, 2 worker node). The minimum recommeded setup is of 5 machines at least (3 manager, 2 worker nodes).</description>
    </item>
    
    <item>
      <title>Re-using existing browser session with Selenium Grid</title>
      <link>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium-grid-python/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium-grid-python/</guid>
      <description>In our previous articles we discussed about re-using Browser session in Selenium for local browsers. We spoke about saving the Session ID and the Executor URL for re-creating the sessions. Now let&amp;rsquo;s us have re-look at the approach when we use Selenium Grid
Launching the Grid I am using brew to install selenium-server-standalone on my Mac. But if you are using something else, then download the latest version from here</description>
    </item>
    
    <item>
      <title>Enumerating running Firefox browsers in Selenium</title>
      <link>https://tarunlalwani.in/post/enumerating-running-firefox-browser-selenium/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/enumerating-running-firefox-browser-selenium/</guid>
      <description>This is another article in our &amp;ldquo;Re-use selenium session&amp;rdquo; series. This article is specific to Firefox browser ran on a local system using Selenium
Consider the below python code
from selenium import webdriver driver = webdriver.Firefox()  This opens up a firefox browser on your machine. We know that Selenium uses geckodriver for communicating with the firefox. So let&amp;rsquo;s check the process
$ ps aux | grep geckodriver tarun.lalwani 11982 0.</description>
    </item>
    
    <item>
      <title>Enumerating running Chrome browsers in Selenium</title>
      <link>https://tarunlalwani.in/post/enumerating-running-chrome-browser-selenium/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/enumerating-running-chrome-browser-selenium/</guid>
      <description>This is another article in our &amp;ldquo;Re-use selenium session&amp;rdquo; series. This article is specific to Chrome browser run on a local system using Selenium
Consider the below python code
from selenium import webdriver driver = webdriver.Chrome()  This opens up a chrome browser on your machine. We know that Selenium uses chromewebdriver for communicating with the chrome. So let&amp;rsquo;s check the process
$ ps aux | grep chromedriver tarun.lalwani 8805 0.</description>
    </item>
    
    <item>
      <title>Re-using existing browser session in Selenium using C#</title>
      <link>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium-csharp/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium-csharp/</guid>
      <description>Earlier I wrote an article on how to re-use a session in Selenium using Java. @Jim Hazen asked if the I could provide the implementation of same in C#. So here it is
The first time I worked out this approach was in C# only, but that was back in 2014. That time I copied code from the Selenium source code and modified it. This makes upgrading Selenium version difficult.</description>
    </item>
    
    <item>
      <title>Selenium disable popup blocker in different browsers</title>
      <link>https://tarunlalwani.in/post/selenium-disable-popup-blocker-different-browsers/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/selenium-disable-popup-blocker-different-browsers/</guid>
      <description>Some testing scenarios requires that the Popup blocking be disabled. In this article we will look at ways for disabling popup blocker for different browser
Disabling Popup blocker in InternetExplorer This can be done by setting a registry setting.
from _winreg import * def set_popupblocker_status(enabled): key = OpenKey(HKEY_CURRENT_USER, r&amp;quot;Software\Microsoft\Internet Explorer\New Windows&amp;quot;, 0, KEY_ALL_ACCESS) SetValueEx(key, &amp;quot;PopupMgr&amp;quot;, 0, REG_SZ, enabled) CloseKey(key) set_popupblocker_status(&amp;quot;no&amp;quot;)  Disabling Popup blocker in Firefox For firefox, this can be done using a preference setting dom.</description>
    </item>
    
    <item>
      <title>Re-using existing browser session in Selenium using Java</title>
      <link>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium-java/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium-java/</guid>
      <description>Yesterday I wrote an article on how to re-use a session in Selenium using Python. @Aditya Baraskar asked if the same was possible in Java.
Once you know the concepts, languages usually is no barrier. So I tried using the same approach that we did in Python and see how it works out in Java
Attempt 1 ChromeDriver driver = new ChromeDriver(); HttpCommandExecutor executor = (HttpCommandExecutor) driver.getCommandExecutor(); URL url = executor.</description>
    </item>
    
    <item>
      <title>Re-using existing browser session in selenium</title>
      <link>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/reusing-existing-browser-session-selenium/</guid>
      <description>Comparison between Selenium and UFT Behavior For those of us who come from a QTP/UFT background, being able to test the same browser after a disconnect is usually a piece of cake
1. systemutil.run &amp;quot;iexplore.exe&amp;quot; 2. x = 2/0 3. Browser(&amp;quot;index:=0&amp;quot;).navigate (&amp;quot;http://www.google.com&amp;quot;)  If we run the above script in QTP/UFT, the script will error out on Line #2 and we can re-run the script from Line #3 and it would still work and navigate inside the browser we had opened earlier.</description>
    </item>
    
    <item>
      <title>Selenium disable Image loading in different browsers</title>
      <link>https://tarunlalwani.in/post/selenium-disable-image-loading-different-browsers/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/selenium-disable-image-loading-different-browsers/</guid>
      <description>Sometimes during testing or scraping a website, we are not interested in loading the images on the page. Disabling images helps up speed up the page load times and make execution faster.
Even if we are interested in knowing the location (source) of images, we can still disable loading of all the images in GUI. In Selenium each browser requires different techniques to do so. We will look at each one of them one by one</description>
    </item>
    
    <item>
      <title>Selenium change User-Agent of different browsers</title>
      <link>https://tarunlalwani.in/post/selenium-change-user-agent-different-browsers/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tarunlalwani.in/post/selenium-change-user-agent-different-browsers/</guid>
      <description>Server uses User-Agent string to differentiate between different browsers and devices. Each device + browser combination can have a different name to identify the Browser and its version. Thougth that may not be 100% true in all cases.
In this article we will see how to change the user-agent of different browser when automating them using Selenium
Changing User-Agent in Internet Explorer Unfortunately there is no good way to change the User-Agent of a IE browser.</description>
    </item>
    
  </channel>
</rss>